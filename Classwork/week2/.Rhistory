table(TitanicData$Pclass[which.max(table(TitanicData$Pclass))])
# boxplot male/female by satistfaction
# with boxplot
# do this again with buckets or something!
fill <- "lightblue"
line <- "blue"
Titanic3rdClass <- TitanicData[which(TitanicData$Pclass==3),]
g<- ggplot(Titanic3rdClass, aes(x=Pclass,y=Fare))
g<- g + geom_boxplot(fill=fill, color=line)
g<- g + ggtitle("Fare by 3rd Class") + theme(plot.title=element_text(hjust=0.5))
g
ggplot(data=Tiaanic3rdClass, aes(y=Titanic3rdClass$Fare)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
fill="green",
alpha = .2) +
labs(title="Histogram for Age", x="Age", y="Count") +
xlim(c(18,52)) +
ylim(c(0,30))
ggplot(data=Titanic3rdClass, aes(y=Titanic3rdClass$Fare)) +
geom_histogram(breaks=seq(20, 50, by=2),
col="red",
fill="green",
alpha = .2) +
labs(title="Histogram for Age", x="Age", y="Count") +
xlim(c(18,52)) +
ylim(c(0,30))
g<- ggplot(data=Titanic3rdClass, aes(Titanic3rdClass$Fare))
g<- g + geom_histogram(col="blue", fill="green", bins=15)
g<- g + ggtitle("Fare by 3rd Class")  + theme(plot.title=element_text(hjust=0.5))
g
tab<-table(TitanicData$Embarked, TitanicData$Survived)
tab
barplot(tab)
barplot(tab, (c="blue","green","orange"))
barplot(tab, (col=c("blue","green","orange")))
barplot(tab, beside=T)
rownames(tab)
barplot(tab, (col=c("blue","green","orange")))
rownames(tab)
rownames(tab)<-c("Cherbourg", "Queenstown", "Southampton")
rownames(tab)
tab
colnam(tab)
colnames(tab)
colnames(tab)<-c("Did Not Survive", "Survived")
colnames(tab)
tab
barplot(tab, beside=T)
barplot(tab, beside=T, legend=rownames(tab))
barplot(tab, beside=T, legend=rownames(tab), main="Survival by Embarkment Port", ylab="Number of Individuals")
barplot(tab, col=c("blue","green","orange"))
tab<-table(TitanicData$Embarked, TitanicData$Survived)
rownames(tab)<-c("Cherbourg", "Queenstown", "Southampton")
rownames(tab)
colnames(tab)<-c("Did Not Survive", "Survived")
colnames(tab)
tab
barplot(tab, beside=T, legend=rownames(tab), col=c("blue","green","orange"), las=1,
main="Survival by Embarkment Port", ylab="Number of Individuals")
# boxplot male/female by satistfaction
# with boxplot
# do this again with buckets or something!
fill <- "lightblue"
line <- "blue"
Titanic3rdClass <- TitanicData[which(TitanicData$Pclass==3),]
g<- ggplot(Titanic3rdClass, aes(x=Pclass,y=Fare))
g<- g + geom_boxplot(fill=fill, color=line)
g<- g + ggtitle("Fare by 3rd Class") + theme(plot.title=element_text(hjust=0.5))
g
# histogram of Fares Paid in 3rd class
g<- ggplot(data=Titanic3rdClass, aes(Titanic3rdClass$Fare))
g<- g + geom_histogram(col="blue", fill="green", bins=15)
g<- g + ggtitle("Fare by 3rd Class")  + theme(plot.title=element_text(hjust=0.5))
g
# histogram of Fares Paid in 3rd class
g<- ggplot(data=Titanic3rdClass, aes(Titanic3rdClass$Fare))
g<- g + geom_histogram(col="blue", fill="green", bins=15)
g<- g + ggtitle("Fare by 3rd Class")  + theme(plot.title=element_text(hjust=0.5))
g
tab<-table(TitanicData$Embarked, TitanicData$Survived)
rownames(tab)<-c("Cherbourg", "Queenstown", "Southampton")
rownames(tab)
colnames(tab)<-c("Did Not Survive", "Survived")
colnames(tab)
tab
barplot(tab, beside=T, legend=rownames(tab), col=c("blue","green","orange"), las=1,
main="Survival by Embarkment Port", ylab="Number of Individuals")
barplot(tab, beside=T, legend=rownames(tab), col=c("blue","green","orange"), las=1,
main="Survival by Embarkment Port", ylab="Number of Individuals", ylim=400)
barplot(tab, beside=T, legend=rownames(tab), col=c("blue","green","orange"), las=1,
main="Survival by Embarkment Port", ylab="Number of Individuals", ylim=(0,400))
barplot(tab, beside=T, legend=rownames(tab), col=c("blue","green","orange"), las=1,
main="Survival by Embarkment Port", ylab="Number of Individuals", ylim=c(0,400))
barplot(tab, beside=T, legend=rownames(tab), col=c("blue","green","orange"), las=1,
main="Survival by Embarkment Port", ylab="Number of Individuals", ylim=c(0,425))
barplot(tab, beside=T, legend=rownames(tab), col=c("blue","green","orange"), las=1,
main="Survival by Embarkment Port", ylab="Number of Individuals", ylim=c(0,375))
barplot(tab, beside=T, legend=rownames(tab), col=c("blue","green","orange"), las=1,
main="Survival by Embarkment Port", ylab="Number of Individuals", ylim=c(0,375))
# read in sales data
sales <- read.csv("//Users/Joyce/Desktop/Syracuse/IST707/Classwork/week2/sales.csv", header = TRUE, na.strings = ")
)
".")
# read in sales data
sales <- read.csv("/Users/Joyce/Desktop/Syracuse/IST707/Classwork/week2/sales.csv", header = TRUE, na.strings = "")
View(sales)
salesByRegion <- aggregate(cbind(Mon,Tue,Wed,Thu,Fri,Sat,Sun), by=list(Group.region=Region),FUN=sum)
salesByRegion <- aggregate(cbind("Mon","Tue","Wed","Thu","Fri","Sat","Sun"), by=list(Group.region=Region),FUN=sum)
salesByRegion=aggregate(cbind(Mon, Tue, Wed, Thu, Fri, Sat, Sun)~Region, data=sales, sum)
View(salesByRegion)
View(salesByRegion)
salesInWeekend=aggregate(cbind(Sat, Sun)~Region, data=sales, sum)
View(salesInWeekend)
View(salesInWeekend)
# sales in weekend
InWeekend <- rowSums(sales[,c("Sat","Sun")])
salesNew <- data.frame(sales,InWeekend)
salesNew
salesInWeekend=aggregate(InWeekend)~Region, data=sales, sum)
salesInWeekend <- aggregate(InWeekend, by=list(Region), FUN-mean)
salesInWeekend <- aggregate(InWeekend, by=list(Region), FUN=mean)
salesInWeekend <- aggregate(InWeekend)~Region, data=salesNew, mean)
salesInWeekend <- aggregate(cbind(InWeekend)~Region, data=salesNew, mean)
View(salesInWeekend)
View(salesInWeekend)
# Aggregate fares for men and women in Titanic
fareByGender <- aggregate(cbind(Fare)~Sex, data=TitanicData, sum)
fareByGender
# Aggregate fares for men and women in Titanic
fareByGender <- aggregate(cbind(Fare)~Sex, data=TitanicData, mean)
fareByGender
TitanicTestData <- TitanicData
ageBins <- cut(TitanicTestData$Age, breaks=c(0,10,20,30,40,50,60,70,Inf),
labels=c("child", "teen", "twenties", "thirties",
"fourties", "fifties", "sixties", "olderThan60"))
(ageBins)
## plot this
## first - what structure is this
(str(ageBins))
table(ageBins)
counts <- table(ageBins)
barplot(counts, main="Age Distribution", xlab="Age")
########### Step 9 ---------------------------
## Data Transformation Examples
##
## LOg Transformation
plot(TitanicTestData$Age,log(TitanicTestData$Age))
## scale will normalize data
## centering data is subtracting the mean
## scaling data is dividing by the std dev
(scale(TitanicTestData$Age, center=TRUE, scale=TRUE))
Result3 <-(TitanicTestData$Age - mean(TitanicTestData$Age))/sd(TitanicTestData$Age)
## View the results on a plot
hist(Result3)
## Using min-max normaization is a similar idea....
Min_Max <- (TitanicTestData$Age - min(TitanicTestData$Age,
na.rm=TRUE))/(max(TitanicTestData$Age) - min(TitanicTestData$Age))
(Min_Max)
hist(Min_Max)
summary(TitanicData$Fare)
count(TitanicData,TitanicData$Fare==0)
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,5,10,15,20,25,30,35,40,45,50,Inf),
labels=c("Free", "< 10", "10 < 15", "15 < 20", "20 < 25", "25 < 30", "30 < 35", "35 < 40",
"40 < 45", "45 < 50", "> 50"))
(FareBins)
## plot this
## first - what structure is this
(str(FareBins))
table(FareBins)
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,5,10,15,20,25,30,35,40,45,50,55, 60, 65,Inf),
labels=c("Free", "< 10", "10 < 15", "15 < 20", "20 < 25", "25 < 30", "30 < 35", "35 < 40",
"40 < 45", "45 < 50", "50 < 55", "55 < 60", "60 < 65", "> 65"))
## plot this
## first - what structure is this
(str(FareBins))
table(FareBins)
FareBins <- cut(TitanicTestData$Fare, breaks=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90,Inf),
labels=c("Free", "< 10", "10 < 20", "20 < 30", "30 < 40",
"40 < 50", "50 < 60", "60 < 70", "70 < 80", "80 < 90", "> 90"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, Inf),
labels=c("Free", "< 10", "10 < 20", "20 < 30", "30 < 40",
"40 < 50", "50 < 60", "60 < 70", "70 < 80", "80 < 90", "> 90"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, Inf),
labels=c("Free", "< 10", "10 < 20", "20 < 30", "30 < 40",
"40 < 50", "50 < 60", "60 < 70", "70 < 80", "80 < 90", "> 90"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0, 10, 20, 30, 40),
labels=c("Free", "< 10", "10 < 20", "20 < 30", "30 < 40"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,5,10,15,20,25,30,35,40,45,50,55, 60, 65,Inf),
labels=c("Free", "< 10", "10 < 15", "15 < 20", "20 < 25", "25 < 30", "30 < 35", "35 < 40",
"40 < 45", "45 < 50", "50 < 55", "55 < 60", "60 < 65", "> 65"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,10,15,20,25,30,35,40,45,50,55, 60, 65,Inf),
labels=c("Free", "< 10", "10 < 15", "15 < 20", "20 < 25", "25 < 30", "30 < 35", "35 < 40",
"40 < 45", "45 < 50", "50 < 55", "55 < 60", "60 < 65", "> 65"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,10,15,20,25,30,35,40,45,50,55, 60, 65,Inf),
labels=c("< 10", "10 < 15", "15 < 20", "20 < 25", "25 < 30", "30 < 35", "35 < 40",
"40 < 45", "45 < 50", "50 < 55", "55 < 60", "60 < 65", "> 65"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,10,20,25,30,35,40,45,50,55, 60, 65,Inf),
labels=c("< 10", "10 < 20", "20 < 25", "25 < 30", "30 < 35", "35 < 40",
"40 < 45", "45 < 50", "50 < 55", "55 < 60", "60 < 65", "> 65"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,10,20,30,40,50,55, 60, 65,Inf),
labels=c("< 10", "10 < 20", "20 < 30", "30 < 40",
"40 < 50", "50 < 55", "55 < 60", "60 < 65", "> 65"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,10,20,30,40,50, 60,70,Inf),
labels=c("< 10", "10 < 20", "20 < 30", "30 < 40",
"40 < 50", "50 < 60", "60 < 70", "> 70"))
## first - what structure is this
(str(FareBins))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,10,20,30,40,50, 60,70, Inf),
labels=c("< 10", "10 < 20", "20 < 30", "30 < 40",
"40 < 50", "50 < 60", "60 < 70", "> 70"))
table(FareBins)
counts <- table(FareBins)
counts
barplot(table(FareBins), main="Fare Distribution", xlab="Fare")
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,375), las-1,col=c("blue"))
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,375), las=1,col=c("blue"))
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,325), las=1,col=c("blue"))
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,275 las=1,col=c("blue"))
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,275), las=1,col=c("blue"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,10,20,30,40,50, 60,70,80, Inf),
labels=c("< 10", "10 < 20", "20 < 30", "30 < 40",
"40 < 50", "50 < 60", "60 < 70", "70 < 80", "> 80"))
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,275), las=1,col=c("blue"))
FareBins <- cut(TitanicTestData$Fare, breaks=c(0,10,20,30,40,50, 60,70,80,90, Inf),
labels=c("< 10", "10s", "20s", "30s", "40s", "50s", "60s", "70s", " 80s", "> 80"))
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,275), las=1,col=c("blue"))
## Data Transformation Examples
##
## LOg Transformation
plot(TitanicTestData$Fare,log(TitanicTestData$Fare))
ggplot(TitanicData, aes(x=TitanicData$Fare, y=log(TitanicData$Fare)), geom_point(size=2, shape=23, color="green"))
ggplot(TitanicData, aes(x=TitanicData$Fare, y=log(TitanicData$Fare)))
TitanicData
logFare<-log(TitanicData$Fare)
ggplot(TitanicData, aes(x=TitanicData$Fare, y=logFare)))
ggplot(TitanicData, aes(x=TitanicData$Fare, y=log(TitanicData$Fare)), geom_point(size=2))
# histogram of Fares Paid in 3rd class
g<- ggplot(data=Titanic3rdClass, aes(Titanic3rdClass$Fare))
## Data Transformation Examples
##
## LOg Transformation
plot(TitanicData$Fare,log(TitanicData$Fare))
## Data Transformation Examples
##
## LOg Transformation
plot(TitanicData$Fare,log(TitanicData$Fare), col="blue")
## Data Transformation Examples
##
## LOg Transformation
plot(TitanicData$Fare,log(TitanicData$Fare), col="blue", main="Titanic Fare to Log of Titanic Fare", xlab="Titanic Fare",
ylab="Log of Titanic Fare")
## Data Transformation Examples
##
## LOg Transformation
plot(TitanicData$Fare,log(TitanicData$Fare), col="blue", main="Titanic Fare to Log of Titanic Fare", xlab="Titanic Fare",
ylab="Log of Titanic Fare", pch=20)
# zScore
hist((scale(TitanicTestData$Age, center=TRUE, scale=TRUE)))
# zScore
zTitanic <- scale(TitanicTestData$Age, center=TRUE, scale=TRUE)
hist(zTitanic, main="Histogram of Z-scores for Titanic Fares", xlab="Z-Score of Fare", las=1, col="yellow")
hist(zTitanic, main="Histogram of Z-scores for Titanic Fares", xlab="Z-Score of Fare", las=1, col="yellow")
# zScore
zTitanic <- scale(TitanicTestData$Fare, center=TRUE, scale=TRUE)
hist(zTitanic, main="Histogram of Z-scores for Titanic Fares", xlab="Z-Score of Fare", las=1, col="yellow")
#min-max
## Using min-max normaization is a similar idea....
MinMaxTitanic <- (TitanicData$Fare - min(TitanicData$Fare,
na.rm=TRUE))/(max(TitanicData$Fare) - min(TitanicData$Fare))
hist(MinMaxTitanic, main="Min and Max Titanic Fares", las=1, col="red")
#min-max
## Using min-max normaization is a similar idea....
MinMaxTitanic <- (TitanicData$Fare - min(TitanicData$Fare,
na.rm=TRUE))/(max(TitanicData$Fare) - min(TitanicData$Fare))
hist(MinMaxTitanic, main="Min and Max Titanic Fares", las=1, col="red")
# 2.10.1
# Discretization of Fares
FareBins <- cut(TitanicData$Fare, breaks=c(0,10,20,30,40,50, 60,70,80,90, Inf),
labels=c("< 10", "10s", "20s", "30s", "40s", "50s", "60s", "70s", " 80s", "> 80"))
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,275), las=1,col=c("blue"))
## Log Transformation
plot(TitanicData$Fare,log(TitanicData$Fare), col="blue", main="Titanic Fare to Log of Titanic Fare", xlab="Titanic Fare",
ylab="Log of Titanic Fare", pch=20)
# zScore
zTitanic <- scale(TitanicTestData$Fare, center=TRUE, scale=TRUE)
hist(zTitanic, main="Histogram of Z-scores for Titanic Fares", xlab="Z-Score of Fare", las=1, col="yellow")
# min/max
MinMaxTitanic <- (TitanicData$Fare - min(TitanicData$Fare,
na.rm=TRUE))/(max(TitanicData$Fare) - min(TitanicData$Fare))
hist(MinMaxTitanic, main="Min and Max Titanic Fares", las=1, col="red")
# Discretization of Fares
FareBins <- cut(TitanicData$Fare, breaks=c(0,10,20,30,40,50, 60,70,80,90, Inf),
labels=c("< 10", "10s", "20s", "30s", "40s", "50s", "60s", "70s", " 80s", "> 80"))
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,275), las=1,col=c("blue"))
# Log Transformation
plot(TitanicData$Fare,log(TitanicData$Fare), col="blue", main="Titanic Fare to Log of Titanic Fare", xlab="Titanic Fare",
ylab="Log of Titanic Fare", pch=20)
# zScore
zTitanic <- scale(TitanicTestData$Fare, center=TRUE, scale=TRUE)
hist(zTitanic, main="Histogram of Z-scores for Titanic Fares", xlab="Z-Score of Fare", las=1, col="yellow")
# min/max
MinMaxTitanic <- (TitanicData$Fare - min(TitanicData$Fare,
na.rm=TRUE))/(max(TitanicData$Fare) - min(TitanicData$Fare))
hist(MinMaxTitanic, main="Min and Max Titanic Fares", las=1, col="red")
# 2.10.1
# Discretization of Fares
FareBins <- cut(TitanicData$Fare, breaks=c(0,10,20,30,40,50, 60,70,80,90, Inf),
labels=c("< 10", "10s", "20s", "30s", "40s", "50s", "60s", "70s", " 80s", "> 80"))
barplot(table(FareBins), main="Fare Distribution", xlab="Fare", ylab="Number of Passengers", ylim=c(0,275), las=1,col=c("blue"))
# Log Transformation
plot(TitanicData$Fare,log(TitanicData$Fare), col="blue", main="Titanic Fare to Log of Titanic Fare", xlab="Titanic Fare",
ylab="Log of Titanic Fare", pch=20)
# Log Transformation
plot(TitanicData$Fare,log(TitanicData$Fare), col="green", main="Titanic Fare to Log of Titanic Fare", xlab="Titanic Fare",
ylab="Log of Titanic Fare", pch=20)
# Log Transformation
plot(TitanicData$Fare,log(TitanicData$Fare), col="red", main="Titanic Fare to Log of Titanic Fare", xlab="Titanic Fare",
ylab="Log of Titanic Fare", pch=20)
# zScore
zTitanic <- scale(TitanicTestData$Fare, center=TRUE, scale=TRUE)
hist(zTitanic, main="Histogram of Z-scores for Titanic Fares", xlab="Z-Score of Fare", las=1, col="yellow")
hist(zTitanic, main="Histogram of Z-scores for Titanic Fares", xlab="Z-Score of Fare", las=1, col="goldenrod")
MinMaxTitanic <- (TitanicData$Fare - min(TitanicData$Fare,
na.rm=TRUE))/(max(TitanicData$Fare) - min(TitanicData$Fare))
hist(MinMaxTitanic, main="Min and Max Titanic Fares", las=1, col="orange")
hist(MinMaxTitanic, main="Min and Max Titanic Fares", las=1, col="purple")
install.packages("tidyverse")
# load CourseData using read.csv
MyStoryData <- read.csv("C:/Users/Joyce/Desktop/Syracuse/IST707/Homework/HW2/datastoryteller.csv", header = TRUE, na.strings = "")
#
# Course: SCM 651
# Name: Team 73
# Homework #4
# Code: Loan Analysis - Main Code
# Due Date: 06/02/2019
#
# ----------------------------------------------------------------------------------------------------------------------
# This loads applicable libraries
install.packages("plyr", dependencies=TRUE)
library(plyr)
#specify the packages of interest
packages=c("readxl", "arules",  "arulesViz", "kernlab", "e1071", "gridExtra", "ggplot2", "caret", "CRAN", "zipcodes",
"stargazer", "gmodels", "pastecs", "Hmisc", "reshape2", "plyr", "plotly", "psych", "maps", "ggmap", "tidyverse"
"dplyr")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
# I find this does not always work, so added to install when required here
install.packages("psych", dependencies = TRUE)
library(psych)
require(dplyr)
install.packages("psych", dependencies = TRUE)
# ----------------------------------------------------------------------------------------------------------------------
# This loads applicable libraries
install.packages("plyr", dependencies=TRUE)
library(plyr)
#specify the packages of interest
packages=c("readxl", "arules",  "arulesViz", "kernlab", "e1071", "gridExtra", "ggplot2", "caret", "CRAN", "zipcodes",
"stargazer", "gmodels", "pastecs", "Hmisc", "reshape2", "plyr", "plotly", "psych", "maps", "ggmap", "tidyverse",
"dplyr")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
install.packages("plyr", dependencies = TRUE)
# I find this does not always work, so added to install when required here
install.packages("psych", dependencies = TRUE)
library(psych)
require(dplyr)
# load CourseData using read.csv
MyStoryData <- read.csv("C:/Users/Joyce/Desktop/Syracuse/IST707/Homework/HW2/datastoryteller.csv", header = TRUE, na.strings = "")
# load CourseData using read.csv
MyStoryData <- read.csv("C:/Users/Joyce/Desktop/Syracuse/IST707/Homework/HW2/data-storyteller.csv", header = TRUE, na.strings = "")
# Sampling
# random sample of 100 of Titanic Data
sampleTitanic <- TitanicData[sample(nrow(TitanicData),100),]
sampleTitanic
View(sampleTitanic)
View(sampleTitanic)
# Sampling
# random sample of 100 of Titanic Data
sampleTitanic <- TitanicData[sample(nrow(TitanicData),100, replace=FALSE),]
# systematic sampling
systemSampleTitanic <- TitanicData[seq(1,nrow(TitanicData),10)]
# systematic sampling
systemSampleTitanic <- TitanicData[seq(1,nrow(TitanicData),10),]
nrow(systemSampleTitanic)
View(systemSampleTitanic)
View(systemSampleTitanic)
#
# Course: SCM 651
# Name: Team 73
# Homework #4
# Code: Loan Analysis - Main Code
# Due Date: 06/02/2019
#
# ----------------------------------------------------------------------------------------------------------------------
# This loads applicable libraries
install.packages("plyr", dependencies=TRUE)
library(plyr)
#specify the packages of interest
packages=c("readxl", "arules",  "arulesViz", "kernlab", "e1071", "gridExtra", "ggplot2", "caret", "CRAN", "zipcodes",
"stargazer", "gmodels", "pastecs", "Hmisc", "reshape2", "plyr", "plotly", "psych", "maps", "ggmap", "tidyverse",
"dplyr")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
# I find this does not always work, so added to install when required here
install.packages("psych", dependencies = TRUE)
library(psych)
require(dplyr)
# load CourseData using read.csv
MyStoryData <- read.csv("C:/Users/Joyce/Desktop/Syracuse/IST707/Homework/HW2/data-storyteller.csv", header = TRUE, na.strings = "")
#MyStoryData <- read.csv(filename, header = TRUE, na.strings = "NA")
install.packages("psych", dependencies = TRUE)
# load CourseData using read.csv
MyStoryData <- read.csv("C:/Users/Joyce/Desktop/Syracuse/IST707/Homework/HW2/data-storyteller.csv", header = TRUE, na.strings = "")
#MyStoryData <- read.csv(filename, header = TRUE, na.strings = "NA")
View(MyStoryData)
View(MyStoryData)
## See all the "dots" in the column names?
colnames(MyStoryData)
## This is not good.
## Update the column names in MyStoryData...
colnames(MyStoryData) <- gsub("[.]", "", colnames(MyStoryData))
colnames(MyStoryData) <- gsub("[[:digit:]]", "", colnames(MyStoryData))
is.na(MyStoryData)
sum(is.na(MyStoryData))
for(varname in names(MyStoryData)){
## Only check numeric variables
if(sapply(MyStoryData[varname], is.numeric)){
cat("\n", varname, " is numeric\n")
## Get median
(Themedian <- sapply(MyStoryData[varname],FUN=median))
##print(Themedian)
## check/replace if the values are <=0
MyStoryData[varname] <- replace(MyStoryData[varname], MyStoryData[varname] < 0, Themedian)
}
}
## Tables are great!
(table(MyStoryData$School))
for(i in 1:ncol(MyStoryData)){
print(table(MyStoryData[i]))
}
## WHich variables contain information?
## Does the Section?
# JLJW - all contain data except "VeryAhead"
summary(MyStoryData)
# ----------------------------------------------------------------------------------------------------------------------
# Descriptive Statistics
summary(MyStoryData)
## Let's use visual EDA - boxplots and great
## What does this tell us?
ggplot(stack(MyStoryData), aes(x = ind, y = values, color=ind)) +
geom_boxplot()
##
MyStoryData$School =="A"
JustSchoolA<-subset(MyStoryData, School == "A" )
(JustSchoolA)
(str(JustSchoolA))
## Change Section to a factor
JustSchoolA$Section<-as.factor(JustSchoolA$Section)
ggplot(JustSchoolA, aes(x = Section, y = Middling, color=Section)) +
geom_boxplot()
## Measures - mean, median, sums
library(plyr)
## do once: install.packages("plyr")
## The following will sum all rows for each "School" and per variable in the data
## Let's save this new aggregated result as a DF
SumBySchoolDF <- ddply(MyStoryData, "School", numcolwise(sum))
(SumBySchoolDF)
## Now, I want the total number of students for A - E
## I want to sum the columns for each row
## I will start with:
(SumBySchoolDF)
SumOfStudents <- rowSums(SumBySchoolDF[,c("VeryAhead", "Middling", "Behind",
"MoreBehind","VeryBehind","Completed")])
(SumOfStudents)
TotalPerSchool <- data.frame("School" = SumBySchoolDF$School,
"Total" = SumOfStudents)
(TotalPerSchool)
# I find this does not always work, so added to install when required here
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
install.packages("ggplot2", dependencies = TRUE)
## Let's use visual EDA - boxplots and great
## What does this tell us?
ggplot(stack(MyStoryData), aes(x = ind, y = values, color=ind)) +
geom_boxplot()
##
