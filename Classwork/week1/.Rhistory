install.packages("RODBC")
source('C:/Users/Joyce/Desktop/Syracuse/IST659/Submissions/Week10/Lab10.R')
source('C:/Users/Joyce/Desktop/Syracuse/IST659/Submissions/Week10/Lab10.R')
source('C:/Users/Joyce/Desktop/Syracuse/IST659/Submissions/Week10/Lab10.R')
source('C:/Users/Joyce/Desktop/Syracuse/IST659/Submissions/Week10/Lab10.R')
source('C:/Users/Joyce/Desktop/Syracuse/IST659/Submissions/Week10/Lab10.R')
source('C:/Users/Joyce/Desktop/Syracuse/IST659/Submissions/Week10/Lab10.R')
source('C:/Users/Joyce/Desktop/Syracuse/IST659/Submissions/Week10/Lab10.R')
height <- c(59,60,61,58,67,72,70)
weight <-c(150,140,180,220,160,140,130)
a <- 150
1+1
height <- c(59, 60, 61, 58, 67, 72, 70)
height
weight
a
mean(height)
mean(weight)
length(height)
length(weight)
sum(height)
sum(height)/length(height)
sum(weight)/length(weight)
maxH <- max(height)
maxH
minH <- min(height)
minH
test <- height + 5
test
newweight <- weight + 5
newweight
newweight / height
if (maxH > 60) "Max Height is greater than 60" else "Max Height is less than or equal to 60"
minW <- min(weight)
minW
if (maxH > 60) "yes" else "no"
if (minW > a) "yes" else "no"
q()
v1<-c(1,2,3)
v2<-c(5,6,7)
df<-c(v1,v2)
length(df)
df[-3,]
df[-3:]
df[1,2]
df[1:2]
df
df<-data.frame(v1,v2)
length(df)
df
numrows[df]
num.rows(df)
length(df.index)
nrow(df)
df2<-df[-3,]
df2
lastrownum<-nrow(df)
df2<-df[-lastrownum,]
df2
numcols(df)
ncols(df)
ncol(df)
NewNames<- c("col1", "col2")
colnames(df)<-NewNames
df
df$div<-df$col1/df$col2
df
vec<-c(1,2,3)
vec-4
mean(vec)
#
# Course: IST687
# Name: Joyce Woznica
# Homework 4 - Samples HW
# Due Date: 2/5/2019
# Date Submitted:
#
# Step 1: Write a summarizing function to understand the distribution of a vector
# 1) The function, call it 'printVecInfo' should take a vector as input
# 2) The function should print the following:
#   a) Mean
#   b) Median
#   c) Min & Max
#   d) Standard Deviation
#   e) Quantiles (at 0.05 and 0.95)
#   f) Skewness
# install package for skewness function
install.packages("moments")
library(moments)
# install package for counting strings
install.packages("stringr")
library(stringr)
# This function creates a clean dataframe of the results from a quantile
# function call with probsV as a vector of the alpha and the 1-alpha
# I use this in the printVecInfo function
myQuantDF<-function(xVect,probsV)
{
quant<-quantile(xVect,probsV)
quantDF <- data.frame(id=names(quant), values=unname(quant), stringsAsFactors = FALSE)
return(quantDF)
}
# the printVecInfo function
printVecInfo <- function(vect)
{
# change these to print statements
# need to put these in a dataframe that gets returned
# what statistic, value
retv<-c(cat(sprintf("Mean is: %f\n", mean(vect))),
cat(sprintf("Median is: %f\n", median(vect))),
cat(sprintf("Minimum is: %f\n", min(vect))),
cat(sprintf("Maximum is: %f\n", max(vect))),
cat(sprintf("Standard deviation is: %f\n", sd(vect))))
# now I work with a nice way to print out the quantile function
# hardcoded to be alpha of 0.05
quantDF<-myQuantDF(vect,c(0.05,0.95))
index<-1 # for the index of the vector
while (index <= 2)
{
retv<-append(retv, cat(sprintf("Quantile for %s is: %f\n", quantDF$id[index], quantDF$values[index])))
index<-index+1
}
retv<-append(retv,cat(sprintf("Skewness is: %f\n", skewness(vect))))
}
# 3) Use this vector to test function
myVect<-c(1,2,3,4,5,6,7,8,9,10,50)
printVecInfo(myVect)
sd<-c(1,2,3,4,5)
mean(replicate(1000,mean(sample(smallData,size=5,replace=FALSE))))
mean(replicate(1000,mean(sample(sd,size=5,replace=FALSE))))
library(Rcmdr)
library(Rcmdr)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install.packages(Rcmdr)
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
library(Rcmdr)
utils:::menuInstallPkgs()
q()
utils:::menuInstallPkgs()
library(Rcmdr)
q()
chooseCRANmirror()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
## Set your working director to the path were your code AND datafile is
setwd("C:/Users/Joyce/Desktop/Syracuse/IST707/Classwork/week1")
## Set your working director to the path were your code AND datafile is
setwd("C:/Users/Joyce/Desktop/Syracuse/IST707/Classwork/week1")
## Set your working directory to the path were your code AND datafile is
setwd("C:/Users/Joyce/Desktop/Syracuse/IST707/Classwork/week1")
## Read in .csv data
## Reference:
## https://stat.ethz.ch/R-manual/R-devel/library/utils/html/read.table.html
## The data file and the R code must be in the SAME folder or you must use a path
## The name must be identical.
filename="datastoryteller.csv"
MyStoryData <- read.csv(filename, header = TRUE, na.strings = "NA")
## This is not good.
## Update the column names in MyStoryData...
colnames(MyStoryData) <- gsub("[.]", "", colnames(MyStoryData))
MyStoryData
## Look at the data as a data frame
(head(MyStoryData))
