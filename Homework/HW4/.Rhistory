{
numcols<-length(lesion1)
new_vec<-NULL
#  if (numcols == 4)
#  {
index<-1
while (index <= numcols)
{
lesionVal <- lesion1[index]
# first lesion Value
if (index==1) { new_vec[index]<- firstL[lesionVal]}
# second lesion value
if (index==2)
{
if (lesionVal != 0) { new_vec[index]<- secondL[lesionVal]} else {new_vec[index] <- secondL.0}
}
# third, if zero
if (index == 3)
{
if (lesionVal != 0) {new_vec[index]<- thirdL[lesionVal]} else  {new_vec[index] <- thirdL.0}
}
# fourth, if zero
if (index==4)
{
if (lesionVal != 0) {new_vec[index]<- fourthL[lesionVal]} else  {new_vec[index] <- fourthL.0}
}
index<-index+1
}
#  }
new_vec
}
# Create new DF of lesion1
generateLesion1<-function(col)
{
num.rows <- length(col)
colDF <- NULL
colI <-1
while(colI<=num.rows)
{
theVal <- col[colI]
# check length first - don't do for 1 or 5
vec <- as.integer(unlist(str_split(theVal,"")))
numNums <- length(vec)
if (numNums == 4) {colDF <- rbind(colDF, convertLesion1(vec))}
if (numNums == 1) {colDF <- rbind(colDF, c("none", "none", "none", "none"))}
if (numNums == 5) {colDF <- rbind(colDF, c("fix", theVal, "none", "none"))}
if (numNums == 3) {colDF <- rbind(colDF, c("omit", theVal, "none", "none"))}
colI<-colI+1
}
colDF
}
generateLesion1(colicData$lesion_1)
new_lesion1 <- generateLesion1(colicData$lesion_1)
colnames(new_lesion1)<- c("lesion1A", "lesion1B", "lesion1C", "lesion1D")
str(new_lesion1)
View(new_lesion1)
View(new_lesion1)
# make 3 variables out of lesion_1
# took about 5 hours to figure this out!
new_lesion1Cols <- convertLesion1(colicData$lesion_1)
which(new_lesion1Cols$lesion1A == "fix")
# make 3 variables out of lesion_1
# took about 5 hours to figure this out!
new_lesion1Cols <- data.frame(convertLesion1(colicData$lesion_1))
colnames(new_lesion1Cols) <- c("lesion1A", "lesion1B", "lesion1C", "lesion1D")
str(new_lesion1Cols)
View(new_lesion1Cols)
# make 3 variables out of lesion_1
# took about 5 hours to figure this out!
new_lesion1Cols <- convertLesion1(colicData$lesion_1)
colnames(new_lesion1Cols) <- c("lesion1A", "lesion1B", "lesion1C", "lesion1D")
colicData$lesion_1
convertLesion1(colicData$lesion_1)
# make 3 variables out of lesion_1
# took about 5 hours to figure this out!
new_lesion1Cols <- generateLesion1(colicData$lesion_1)
colnames(new_lesion1Cols) <- c("lesion1A", "lesion1B", "lesion1C", "lesion1D")
which(new_lesion1Cols$lesion1A == "fix")
new_lesion1Cols <- data.frame(new_lesion1Cols)
which(new_lesion1Cols$lesion1A == "fix")
which(new_lesion1Cols$lesion1A == "omit")
newColicData <- cbind(colicData, new_lesion1Cols)
View(newColicData)
View(newColicData)
# replace colicData$lesion_1 with new 4 rows
colicData <- cbind(colicData, new_lesion1Cols)
colicData <- subset(colicData, select=-c(lesion_1))
calculate_mode(colicData$lesion1A)
calculate_mode(colicData$lesion1B)
calculate_mode(colicData$lesion1C)
calculate_mode(colicData$lesion1D)
# the rows to do manually
fix_manually <- which(new_lesion1Cols$lesion1A == "fix")
fix_manually
#
# Course: IST707
# Name: Joyce Woznica
# Project Code:
# Due Date: 12/6/2019
# Date Submitted:
#
# ------------------------------------------------------------------
# force no scientific notation
options(scipen=999)
# Data loading
colicData <- read.csv("C:/Users/Joyce/Desktop/Syracuse/IST707/Project/Data/horseRaw.csv", header = TRUE, na.strings = "NA")
str(colicData)
# rename all the columns for ease of use?
# review missing data
tMissing <-sum(is.na(colicData))
cat("The number of missing values in Horse Colic Data is ", tMissing)
# What to do with missing data??
# replace missing data with means - which will not work on rows that are not numeric,
colicDataM <- replaceNAwMeans(colicData)
# now replace with most common factor
colicDataM <- replaceNAwMode(colicDataM)
Hold.colicData <- colicData
colicData<-colicDataM
# review missing data
tMissing <-sum(is.na(colicData))
cat("The number of missing values in Horse Colic Data is ", tMissing)
# do by hand
# nasogastric tube (NA is mode) - must be 'slight'
# abdomo_appearance - must be 'cloudy'
# abdomen - must be 'distend_large"
# rectal_exam_feces - must be 'absent'
colicData$nasogastric_tube[is.na(colicData$nasogastric_tube)] <- "slight"
colicData$abdomo_appearance[is.na(colicData$abdomo_appearance)] <- "cloudy"
colicData$abdomen[is.na(colicData$abdomen)] <- "distend_large"
colicData$rectal_exam_feces[is.na(colicData$rectal_exam_feces)] <- "absent"
# review missing data
tMissing <-sum(is.na(colicData))
cat("The number of missing values in Horse Colic Data is ", tMissing)
# fix the rows that have extensive combinations
# do we just remove these data points since we only have 8 combined for all 300 horses?
length(which(colicData$lesion_3 != 0))
length(which(colicData$lesion_2 != 0))
# drop these columns and eliminate Hospital Number
colicData <- subset(colicData, select=-c(lesion_2, lesion_3, hospital_number))
# separate out the lesion_1 with variables
length(which(colicData$lesion_1 != 0))
# make 3 variables out of lesion_1
# took about 5 hours to figure this out!
new_lesion1Cols <- generateLesion1(colicData$lesion_1)
colnames(new_lesion1Cols) <- c("lesion1A", "lesion1B", "lesion1C", "lesion1D")
new_lesion1Cols <- data.frame(new_lesion1Cols)
# the rows to do manually
fix_manually <- which(new_lesion1Cols$lesion1A == "fix")
# maybe use the mode for each column on the incorrect "omit"'s
which(new_lesion1Cols$lesion1A == "omit")
# replace colicData$lesion_1 with new 4 rows
colicData <- cbind(colicData, new_lesion1Cols)
colicData <- subset(colicData, select=-c(lesion_1))
# ------------------------------------------------------------------
# General Statistics and Analysis
summary(colicData)
genStat <- stat.desc(colicData, basic=F)
View(genStat)
# combine in a plot
table(colicData$outcome)
barplot(table(colicData$outcome), col=rainbow(20))
# overall description (lengthy)
describe(colicData)
test<-as.matrix(colicData)
summary(test)
# descriptive statistics from using stargazer package
stargazer(colicData, type="text")
# ------------------------------------------------------------------
# Initial Visualizations
# boxplot of mucous_membrane
# boxplot of pain level
# abdomen
# histograms of Rectal_temp, pulse, respiratory rate, temp of extremeties, pulse, reflux
hist(colicData$rectal_temp, col=topo.colors(20))
hist(colicData$pulse, col=terrain.colors(20))
hist(colicData$respiratory_rate, col=rainbow(20))
hist(colicData$rectal_temp, col=cm.colors(20))
hist(colicData$total_protein, col=topo.colors(20))
# count these and group by how many of each
# do a which on the values to get totals
# separate data be outcome for plotting reflux
gastroTbl <- table(colicData$outcome, colicData$nasogastric_reflux)
gastroDF <- data.frame(gastroTbl)
colnames(gastroDF)<-c("outcome", "reflux", "horse_count")
barplot(gastroTbl,beside=TRUE, legend=TRUE, col=c("red", "orange", "green"),
main="Horses showing Naso Gastric Reflux by Outcome",
axisnames=TRUE)
# Here we need to remove NA's first***
barplot(table(colicData$outcome, colicData$abdomen), beside=TRUE, legend=TRUE,
col=c("red", "blue", "green"), main="Abdomen Presentation and Outcome",
axisnames=TRUE)
# count these and group by how many of each
# do a which on the values to get totals
# separate data be outcome for rectal exam feces
fecesTbl <- table(colicData$outcome, colicData$rectal_exam_feces)
fecesDF <- data.frame(fecesTbl)
colnames(fecesDF)<-c("outcome", "feces", "horse_count")
barplot(fecesTbl,beside=TRUE, legend=TRUE, col=c("red", "orange", "green"),
main="Number of Horses Feces Status by Colic Outcome",
axisnames=TRUE)
surgTbl <- table(colicData$outcome, colicData$surgery)
barplot(surgTbl,beside=TRUE, legend=TRUE, col=c("red", "orange", "green"),
main="Number of Horses who had Surgery by Colic Outcome",
axisnames=TRUE)
# boxplot of mucous membrane by outcome
# with boxplot
g <- ggplot(colicData, aes(group=mucous_membrane,x=mucous_membrane,y=outcome))
g <- g + geom_boxplot(aes(fill=factor(mucous_membrane)))
g <- g+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
g <- g + ggtitle("Outcome by Mucous Membrane") + theme(plot.title=element_text(hjust=0.5))
g
# Some initial plotting of the data to see what we have
plot(colicData$outcome,colicData$pulse)
# boxplot of mucous membrane by outcome
# with boxplot
g <- ggplot(colicData, aes(group=outcome,x=outcome,y=pulse))
g <- g + geom_boxplot(aes(fill=factor(outcome)))
g <- g+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
g <- g + xlab("Outcome") + ylab("Pulse")
g <- g + ggtitle("Pulse Rate by Outcome") + theme(plot.title=element_text(hjust=0.5))
g
# Plot pulse rate by outcome
g <- ggplot(colicData, aes(x=outcome, y=pulse)) + geom_point()
g <- g + stat_smooth(method= "lm", col=rainbox(20))
g <- g + ggtitle("Pulse Rates by Outcome")
g <- g + xlab("Outcome") + ylab("Pulse")
g
# Are men or women more satisfied?
# Reflected in Figure 9
g<- ggplot(colicData, aes(x=age, fill=factor(outcome)))
g<- g+ ggtitle("Outcome by Age")
g<- g+ xlab("Age") + ylab("Outcome")
g<- g + geom_bar(position="dodge")
g
# Look at some of the data via a scatter plot
g <- ggplot(colicData, aes(x=temp_of_extremities, y=respiratory_rate))
g <- g + geom_point(aes(color=outcome, size=age))
g <- g + ggtitle("Outcome using Age, Respiratory Rate and Extremity Temperature")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("Extremity Temperature") + ylab("Respiratory Rate")
g
# ------------------------------------------------------------------
# Clustering
# must first convert all data to numeric!
install.packages("flexclust")
library(flexclust)
# determine number of clusters
c_test <- stepFlexclust(colicData, k=2:7, nrep=20)
fit <- kmeans(colicData, 5)
# Decision Tree
##Make Train and Test sets
trainRatio <- .60
set.seed(11) # Set Seed so that same sample can be reproduced in future also
c_test
# ------------------------------------------------------------------
# Clustering
# must first convert all data to numeric!
install.packages("flexclust")
install.packages("flexclust")
library(flexclust)
# determine number of clusters
c_test <- stepFlexclust(colicData, k=2:7, nrep=20)
# K-Means Cluster Analysis
# get cluster means
aggregate(X,by=list(fit$cluster),FUN=mean)
# K-Means Cluster Analysis
# get cluster means
aggregate(colicData,by=list(fit$cluster),FUN=mean)
# append cluster assignment
mydata <- data.frame(colicData, fit$cluster)
## k means clustering Methods
X <- m_norm
k2 <- kmeans(colicData, centers = 2, nstart = 100, iter.max = 50)
str(k2)
fit
fit$cluster
# ------------------------------------------------------------------
# Clustering
X <- colicData
## k means visualization results!
distance1 <- get_dist(X,method = "manhattan")
fviz_dist(distance1, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
install.packages ("factoextra")
library(factoextra)
# ------------------------------------------------------------------
# Clustering
X <- colicData
## k means visualization results!
distance1 <- get_dist(X,method = "manhattan")
fviz_dist(distance1, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
distance2 <- get_dist(X,method = "euclidean")
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
distance3 <- get_dist(X,method = "spearman")
fviz_dist(distance3, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07", title= "Distance Matrix Visualization, Spearman Method"))
str(X)
# Decision Tree
##Make Train and Test sets
trainRatio <- .60
set.seed(11) # Set Seed so that same sample can be reproduced in future also
sample <- sample.int(n = nrow(colicData), size = floor(trainRatio*nrow(colicData)), replace = FALSE)
train <- colicData[sample, ]
test <- colicData[-sample, ]
# train / test ratio
length(sample)/nrow(colicData)
##--------------------------------------------------------------------------------------------------------
#Decision Tree Models
#Train Tree Model 1
install.packages("rpart")
install.packages("rpart")
require(rpart)
library(rpart)
require(rpart.plot)
require(e1071)
install.packages("rattle")
library(rattle)
require(rattle)
train_tree1 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0))
summary(train_tree1)
#predict the test dataset using the model for train tree No. 1
predicted1 <- predict(train_tree1, test, type="class")
#plot number of splits
rsq.rpart(train_tree1)
#predict the test dataset using the model for train tree No. 1
predicted1 <- predict(train_tree1, test, type="class")
#plot number of splits
rsq.rpart(train_tree1)
plotcp(train_tree1)
#plot the decision tree
fancyRpartPlot(train_tree1, cex=0.8, caption="Training Tree 1")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted1, true=test$outcome)
#Train Tree Model 2
train_tree2 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 2, maxdepth = 5))
summary(train_tree2)
#predict the test dataset using the model for train tree No. 2
predicted2<- predict(train_tree2, test, type="class")
#plot number of splits
rsq.rpart(train_tree2)
#plot the decision tree
fancyRpartPlot(train_tree2, cex=0.7, caption="Training Tree 2")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted2, true=test$outcome)
#Train Tree Model 3
train_tree3 <- rpart(Author ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 5, maxdepth = 5))
#Train Tree Model 3
train_tree3 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 5, maxdepth = 5))
summary(train_tree3)
#predict the test dataset using the model for train tree No. 3
predicted3 <- predict(train_tree3, test, type="class")
#plot number of splits
rsq.rpart(train_tree3)
#plot the decision tree
fancyRpartPlot(train_tree3, cex=0.7, caption="Training Tree 3")
#confusion matrix to find correct and incorrect predictions
table(Authorship=predicted3, true=test$Author)
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted3, true=test$outcome)
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted1, true=test$outcome)
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted2, true=test$outcome)
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted3, true=test$outcome)
#Train Tree Model 4
train_tree4 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 4, maxdepth = 6))
summary(train_tree4)
#predict the test dataset using the model for train tree No. 4
predicted4 <- predict(train_tree4, test, type="class")
#plot number of splits
rsq.rpart(train_tree4)
#plot the decision tree
fancyRpartPlot(train_tree4, cex=0.7, caption="Training Tree 4")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted4, true=test$outcome)
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted2, true=test$outcome)
#Train Tree Model 4
train_tree4 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 3, maxdepth = 6))
summary(train_tree4)
#predict the test dataset using the model for train tree No. 4
predicted4 <- predict(train_tree4, test, type="class")
#plot number of splits
rsq.rpart(train_tree4)
#plot the decision tree
fancyRpartPlot(train_tree4, cex=0.7, caption="Training Tree 4")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted4, true=test$outcome)
#Train Tree Model 4
train_tree4 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 2, maxdepth = 6))
summary(train_tree4)
#predict the test dataset using the model for train tree No. 4
predicted4 <- predict(train_tree4, test, type="class")
#plot number of splits
rsq.rpart(train_tree4)
#plot the decision tree
fancyRpartPlot(train_tree4, cex=0.7, caption="Training Tree 4")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted4, true=test$outcome)
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted2, true=test$outcome)
#Train Tree Model 4
train_tree4 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 2, maxdepth = 4))
summary(train_tree4)
#predict the test dataset using the model for train tree No. 4
predicted4 <- predict(train_tree4, test, type="class")
#plot number of splits
rsq.rpart(train_tree4)
#plot the decision tree
fancyRpartPlot(train_tree4, cex=0.7, caption="Training Tree 4")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted4, true=test$outcome)
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted2, true=test$outcome)
#Train Tree Model 4 ** BEST MODEL **
train_tree4 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 2, maxdepth = 3))
summary(train_tree4)
#predict the test dataset using the model for train tree No. 4
predicted4 <- predict(train_tree4, test, type="class")
#plot number of splits
rsq.rpart(train_tree4)
#plot the decision tree
fancyRpartPlot(train_tree4, cex=0.7, caption="Training Tree 4")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted4, true=test$outcome)
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted2, true=test$outcome)
#Train Tree Model 4 ** BEST MODEL **
train_tree4 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 3, maxdepth = 3))
summary(train_tree4)
#predict the test dataset using the model for train tree No. 4
predicted4 <- predict(train_tree4, test, type="class")
#plot number of splits
rsq.rpart(train_tree4)
#plot the decision tree
fancyRpartPlot(train_tree4, cex=0.7, caption="Training Tree 4")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted4, true=test$outcome)
train_tree1 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0))
summary(train_tree1)
#predict the test dataset using the model for train tree No. 1
predicted1 <- predict(train_tree1, test, type="class")
#plot number of splits
rsq.rpart(train_tree1)
#predict the test dataset using the model for train tree No. 1
predicted1 <- predict(train_tree1, test, type="class")
#plot number of splits
rsq.rpart(train_tree1)
plotcp(train_tree1)
#plot the decision tree
fancyRpartPlot(train_tree1, cex=0.8, caption="Training Tree 1")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted1, true=test$outcome)
#Train Tree Model 2
train_tree2 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 2, maxdepth = 5))
summary(train_tree2)
#predict the test dataset using the model for train tree No. 2
predicted2<- predict(train_tree2, test, type="class")
#plot number of splits
rsq.rpart(train_tree2)
#plot the decision tree
fancyRpartPlot(train_tree2, cex=0.7, caption="Training Tree 2")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted2, true=test$outcome)
#Train Tree Model 3
train_tree3 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 5, maxdepth = 5))
summary(train_tree3)
#predict the test dataset using the model for train tree No. 3
predicted3 <- predict(train_tree3, test, type="class")
#plot number of splits
rsq.rpart(train_tree3)
#plot the decision tree
fancyRpartPlot(train_tree3, cex=0.7, caption="Training Tree 3")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted3, true=test$outcome)
#Train Tree Model 4 ** BEST MODEL **
train_tree4 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 3, maxdepth = 5))
summary(train_tree4)
#predict the test dataset using the model for train tree No. 4
predicted4 <- predict(train_tree4, test, type="class")
#plot number of splits
rsq.rpart(train_tree4)
#plot the decision tree
fancyRpartPlot(train_tree4, cex=0.7, caption="Training Tree 4")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted4, true=test$outcome)
#Train Tree Model 5 ** BEST MODEL **
train_tree5 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 3, maxdepth = 4))
summary(train_tree5)
#predict the test dataset using the model for train tree No. 4
predicted5 <- predict(train_tree5, test, type="class")
#plot number of splits
rsq.rpart(train_tree5)
#plot the decision tree
fancyRpartPlot(train_tree5, cex=0.7, caption="Training Tree 4")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted5, true=test$outcome)
#Train Tree Model 6 ** BEST MODEL **
train_tree6 <- rpart(outcome ~ ., data = train, method="class", control=rpart.control(cp=0, minsplit = 3, maxdepth = 3))
summary(train_tree6)
#predict the test dataset using the model for train tree No. 4
predicted6 <- predict(train_tree6, test, type="class")
#plot number of splits
rsq.rpart(train_tree6)
#plot the decision tree
fancyRpartPlot(train_tree6, cex=0.7, caption="Training Tree 4")
#confusion matrix to find correct and incorrect predictions
table(Outcome=predicted6, true=test$outcome)
table(Outcome=predicted1, true=test$outcome)
table(Outcome=predicted2, true=test$outcome)
table(Outcome=predicted3, true=test$outcome)
table(Outcome=predicted4, true=test$outcome)
table(Outcome=predicted5, true=test$outcome)
