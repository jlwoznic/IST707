g <- g + xlab("School Name") + ylab("Number of Students")
g
# Look at all the data via a scatter plot
g <- ggplot(meltMyStoryData, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Section, shape=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students")
g
g <- ggplot(meltMyStoryData, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Section, shape=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students") + ylim(0,58)
g
g <- ggplot(meltMyStoryData, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Section, shape=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students") + ylim(0,55)
g
g <- ggplot(meltMyStoryData, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Section, shape=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students") + ylim(0,60)
g
View(meltedData)
g <- ggplot(meltedData, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students") + ylim(0,60)
g
g <- ggplot(meltedData, aes(x=School, y=Students))
g <- g + geom_point(aes(color=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students") + ylim(0,60)
g
meltedData
meltedDatawTotal <- melt(SumBySchoolDF)
# Plot the total for each Lesson Status by school
# transform the data for better plots
install.packages("reshape2")
library(reshape2)
meltedDatawTotal <- melt(SumBySchoolDF)
View(meltedDatawTotal)
meltedData <- melt(SumBySchoolDF)
colnames(meltedData) <- c("School", "Status", "Students")
meltMyStoryData <- melt(MyStoryData)
colnames(meltMyStoryData) <- c("School", "Section", "Status", "NumStudents")
sBS <- data.frame(meltMyStoryData %>% group_by(School) %>% summarise(studs = sum(NumStudents)))
sBSS <- data.frame(meltMyStoryData %>% group_by(Status, School, Section) %>% summarise(NumPerSec = sum(NumStudents)))
sBSec <- data.frame(meltMyStoryData %>% group_by(School, Section) %>% summarise(NumPerSec = sum(NumStudents)))
View(SumBySchoolDF)
## Measures - mean, median, sums
## The following will sum all rows for each "School" and per variable in the data
## Let's save this new aggregated result as a DF
SumBySchoolDF <- ddply(MyStoryData, "School", numcolwise(sum))
g <- ggplot(meltedData[1:30,], aes(x=School, y=Students))
g <- g + geom_point(aes(color=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students")
g
StudentSums/sum(StudentSums)
ratio <- function(x,y) {
return(x/y)
}
ratio(5/10)
ratio(5,10)
ratio <- function(x,y) {
return((x/y)*100)
}
ratio(7,10)
ratio <- function(x,y) {
return(x/y)
}
totalStudents <- sum(SumBySchoolDF$Total)
## Now, I want the total number of students for A - E
## I want to sum the columns for each row
## I will start with:
SumOfStudents <- rowSums(SumBySchoolDF[,c("VeryAhead", "Middling", "Behind",
"MoreBehind","VeryBehind","Completed")])
allStudentsbyStatus <- colSums(SumBySchoolDF, na.rm=TRUE, dims=1)
allStudentsbyStatus <- colSums(SumBySchoolDF[,2:7], na.rm=TRUE, dims=1)
View(schoolLessonStatmeans)
allStudentsbyStatus <- data.frame(colSums(SumBySchoolDF[,2:7], na.rm=TRUE, dims=1))
View(allStudentsbyStatus)
View(allStudentsbyStatus)
colnames(allStudentsbyStatus) <- c("NumStudents")
StatusList <- c("Completed", "VeryAhead", "Middling", "Behind", "MoreBehind", "VeryBehind")
View(SumBySchoolDF)
View(allStudentsbyStatus)
View(allStudentsbyStatus)
ratioDF <- c("")
statnames <- rownames(allStudentsbyStatus)
statnames
rownames(allStudentsbyStatus) <- NULL
allStudentsbyStatus <- cbind(statnames, allStudentsbyStatus)
View(allStudentsbyStatus)
View(allStudentsbyStatus)
colnames(allStudentsbyStatus) <- c("Status", "NumStudents")
ratio
ratio <- function (x) {
return (x/totalStudents)}
ratio (45)
apply(allStudentsbyStatus[,2:],1,ratio)
apply(allStudentsbyStatus[,-1],1,ratio)
apply(allStudentsbyStatus[,2:ncol(allStudentsbyStatus)],1,ratio)
apply(allStudentsbyStatus[,2],1,ratio)
allStudentsbyStatus[,2]
aggregate(allStudentsbyStatus[,2],1,function (x) ratio)
apply(allStudentsbyStatus[,2],1,function (x) ratio)
apply(allStudentsbyStatus[,2],1,ratio(x))
apply(allStudentsbyStatus[,2],1,function(x) x/totalStudents)
apply(allStudentsbyStatus[,2],1,function(x){x/totalStudents})
allStudentsbyStatus[,2]
ddply(allStudentsbyStatus[,2],.(NumStudents), function(x){x/totalStudents})
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
ddply(allStudentsbyStatus[,2],.(NumStudents), function(x){x/totalStudents})
library(dplyr)
ddply(allStudentsbyStatus[,2],.(NumStudents), function(x){x/totalStudents})
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
ddply(allStudentsbyStatus[,2],.(NumStudents), function(x){x/totalStudents})
install.packages("plyr")
library(plyr)
ddply(allStudentsbyStatus[,2],.(NumStudents), function(x){x/totalStudents})
ddply(allStudentsbyStatus[,2],.(NumStudents), summarize, function(x){x/totalStudents})
ddply(allStudentsbyStatus[,2],.(NumStudents), summarize, function(x){return(x/totalStudents)})
for (counter in nrow(allStudentsbyStatus) {
newCol<-c(newCol, ratio(AllStudentsbyStatus[counter,2]))
counter<-counter+1
}
counter <- 1
newCol<-c("")
for (counter in nrow(allStudentsbyStatus) {
for (counter in nrow(allStudentsbyStatus))
{
newCol<-c(newCol, ratio(AllStudentsbyStatus[counter,2]))
counter<-counter+1
}
for (counter in nrow(allStudentsbyStatus))
{
newCol<-c(newCol, ratio(allStudentsbyStatus[counter,2]))
counter<-counter+1
}
newCol
counter <- 1
newCol <- c("")
for (counter in nrow(allStudentsbyStatus))
{
newCol<-c(newCol, ratio(allStudentsbyStatus[counter,2]))
newCol
counter <- counter+1
}
counter <- 1
newCol <- c("")
for (counter in nrow(allStudentsbyStatus))
{
newCol<-c(newCol, ratio(allStudentsbyStatus[counter,2]))
print(paste("number is ", newCol))
counter <- counter+1
}
counter <- 1
newCol <- c("")
for (counter in nrow(allStudentsbyStatus))
{
newCol<-c(newCol, ratio(allStudentsbyStatus[counter,2]))
print(paste("number is ", newCol))
counter <- counter+1
print(paste("Counter is ", counter))
}
counter <- 1
newCol <- c("")
for (counter in nrow(allStudentsbyStatus))
{
newCol<-c(newCol, ratio(allStudentsbyStatus[counter,2]))
print(paste("number is ", newCol))
counter <- counter+1
print(paste("Counter is ", counter))
}
apply(allStudentsbyStatus[,2],1,function(x){x/totalStudents})
counter <- 1
newCol <- c("")
for (counter in nrow(allStudentsbyStatus))
{
newCol<-c(newCol, ratio(allStudentsbyStatus[counter,2]))
print(paste("number is ", newCol))
counter <- counter+1
print(paste("Counter is ", counter))
}
counter <- 1
newCol <- c()
counter <- 1
newCol <- c()
for (counter in nrow(allStudentsbyStatus))
{
rat <- ratio(allStudentsbyStatus[counter,2])
newCol <- c(newCol,rat)
print(paste("number is ", newCol))
counter <- counter+1
print(paste("Counter is ", counter))
}
newCol
for (i in nrow(allStudentsbyStatus))
{
rat <- ratio(allStudentsbyStatus[i,2])
newCol <- c(newCol,rat)
}
newCol
nrow(allStudentsbyStatus
)
for (i in nrow(allStudentsbyStatus))
{
rat <- ratio(allStudentsbyStatus[i,2])
newCol <- c(newCol,rat)
}
rat
newCol
newCol <- c()
for (i in nrow(allStudentsbyStatus))
{
rat <- ratio(allStudentsbyStatus[i,2])
newCol <- c(newCol,rat)
}
newCol
ddply(allStudentsbyStatus[,2],.(NumStudents), .fun=ratio))
ddply(allStudentsbyStatus[,2],.(NumStudents), .fun=ratio)
return (x/totalStudents)}
ratio <- function (x) {
return (x/totalStudents)}
ddply(allStudentsbyStatus[,2],.(NumStudents), .fun=ratio)
ddply(allStudentsbyStatus[,2],.(NumStudents), ratio)
ddply(allStudentsbyStatus[,2],.(NumStudents), RatiobyTotal=ratio)
ddply(allStudentsbyStatus[,2],.(NumStudents), summarize, RatiobyTotal=ratio)
newcol <- c(ratio(allStudentsbyStatus$NumStudents))
newcol
allStudentsbyStatus$Percentage <- newcol
View(allStudentsbyStatus)
View(allStudentsbyStatus)
g <- ggplot(allStudentsbyStatus, aes(x=Status, y=Percentage))
g <- g + geom_bar(stat="identity", fill="navy")
g
g <- ggplot(allStudentsbyStatus, aes(x=Status, y=Percentage))
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(allStudentsbyStatus, aes(x=Status, y=Percentage))
g <- g + geom_bar(stat="identity", fill="navy")
g
packages=c("ggplot2", "caret", "stargazer", "pastecs", "reshape2", "psych", "tidyverse")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
install.packages("plyr", dependencies=TRUE)
install.packages("plyr", dependencies = TRUE)
library(plyr)
install.packages("dplyr", dependencies=TRUE)
install.packages("dplyr", dependencies = TRUE)
library(dplyr)
#verify they are loaded
search()
# ----------------------------------------------------------------------------------------------------------------------
# Data loading
# load CourseData using read.csv
MyStoryData <- read.csv("C:/Users/Joyce/Desktop/Syracuse/IST707/Homework/HW2/data-storyteller.csv", header = TRUE, na.strings = "")
## See all the "dots" in the column names?
colnames(MyStoryData)
## This is not good.
## Update the column names in MyStoryData...
colnames(MyStoryData) <- gsub("[.]", "", colnames(MyStoryData))
colnames(MyStoryData) <- gsub("[[:digit:]]", "", colnames(MyStoryData))
# verify no missing data
Total <-sum(is.na(MyStoryData))
cat("The number of missing values in StoryTeller data is ", Total )
for(varname in names(MyStoryData)){
## Only check numeric variables
if(sapply(MyStoryData[varname], is.numeric)){
cat("\n", varname, " is numeric\n")
## Get median
(Themedian <- sapply(MyStoryData[varname],FUN=median))
##print(Themedian)
## check/replace if the values are <=0
MyStoryData[varname] <- replace(MyStoryData[varname], MyStoryData[varname] < 0, Themedian)
}
}
# for this data, section needs to be a factor
str(MyStoryData)
MyStoryData$Section <- factor(MyStoryData$Section)
str(MyStoryData)
# reorder the columns
MyStoryData <- MyStoryData[c("School", "Section", "Completed", "VeryAhead", "Middling", "Behind", "MoreBehind", "VeryBehind")]
# ----------------------------------------------------------------------------------------------------------------------
# Descriptive Statistics
summary(MyStoryData)
# from pastecs package
# only works on numeric variables in the set - provides additional information over "summary"
genStat <- stat.desc(MyStoryData, basic=T)
View(genStat)
View(MyStoryData)
View(MyStoryData)
# Can also use describe for similar information in a different format
describe(MyStoryData)
# descriptive statistics from using stargazer package
# nicely formatted for the statistics around where students are at this time
stargazer(MyStoryData, type="text")
## Measures - mean, median, sums
## The following will sum all rows for each "School" and per variable in the data
## Let's save this new aggregated result as a DF
SumBySchoolDF <- ddply(MyStoryData, "School", numcolwise(sum))
# Add a column for total number of students per section
allStudentbySchool <- rowSums(SumBySchoolDF[,2:7], na.rm=TRUE, dims=1)
SumBySchoolDF$Total <- allStudentbySchool
# obtain the total number of students in the study
totalStudents <- sum(SumBySchoolDF$Total)
allStudentsbyStatus <- data.frame(colSums(SumBySchoolDF[,2:7], na.rm=TRUE, dims=1))
statnames <- rownames(allStudentsbyStatus)
rownames(allStudentsbyStatus) <- NULL
allStudentsbyStatus <- cbind(statnames, allStudentsbyStatus)
colnames(allStudentsbyStatus) <- c("Status", "NumStudents")
ratio <- function (x) {
return (x/totalStudents)}
StatusList <- c("Completed", "VeryAhead", "Middling", "Behind", "MoreBehind", "VeryBehind")
newcol <- c(ratio(allStudentsbyStatus$NumStudents))
allStudentsbyStatus$Percentage <- newcol
# transform the data for better plots
meltedData <- melt(SumBySchoolDF)
colnames(meltedData) <- c("School", "Status", "Students")
meltMyStoryData <- melt(MyStoryData)
colnames(meltMyStoryData) <- c("School", "Section", "Status", "NumStudents")
# find the mean for the number of students each Lesson Status Level by School
schoolLessonStatmeans<- ddply(meltedData, .(Status), summarize, lStatusValue = mean(Students))
#install.packages("ggplot2")
#library(ggplot2)
# Plot to look at data
ggplot(stack(MyStoryData), aes(x = ind, y = values, color=ind)) +
geom_boxplot()
JustSchoolA<-subset(MyStoryData, School == "A" )
(str(JustSchoolA))
# boxplot for just School A by section
ggplot(JustSchoolA, aes(x = Section, y = Middling, color=Section)) +
geom_boxplot()
# plot bar chart by Lesson Status, School, and Number of Students
g <- ggplot(meltedData, aes(x=Status, y = Students, fill = School))
g <- g + geom_bar(stat = "identity")
g <- g+ ggtitle("Students by Lesson Status and School") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("Lesson Status") + ylab("Number of Students")
g
# barcharts by Lesson Status and School
g<- ggplot(meltedData, aes(fill=School, y=Students, x=Status))
g<- g + geom_bar(position="dodge", stat="identity")
g <- g+ ggtitle("Students by Lesson Status and School") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("Lesson Status") + ylab("Number of Students")
g
View(meltedData)
View(meltedData)
# barcharts by Lesson Status and School without Totals
g<- ggplot(meltedData[1:30,], aes(fill=School, y=Students, x=Status))
g<- g + geom_bar(position="dodge", stat="identity")
g <- g+ ggtitle("Students by Lesson Status and School without Totals") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("Lesson Status") + ylab("Number of Students")
g
# barcharts by School and Lesson Status
g<- ggplot(meltedData, aes(fill=Status, y=Students, x=School))
g<- g + geom_bar(position="dodge", stat="identity")
g <- g+ ggtitle("Students by School and Lesson Status") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("School") + ylab("Number of Students")
g
# barcharts by School and Lesson Status
g<- ggplot(meltedData[1:30,], aes(fill=Status, y=Students, x=School))
g<- g + geom_bar(position="dodge", stat="identity")
g <- g+ ggtitle("Students by School and Lesson Status") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("School") + ylab("Number of Students")
g
## Now, I want the total number of students for A - E
## I want to sum the columns for each row
## I will start with:
SumOfStudents <- rowSums(SumBySchoolDF[,c("VeryAhead", "Middling", "Behind",
"MoreBehind","VeryBehind","Completed")])
TotalPerSchool <- data.frame("School" = SumBySchoolDF$School,
"Total" = SumOfStudents)
# histogram of total students by school
g <- ggplot(TotalPerSchool, aes(x=School, y=Total))
g <- g + geom_bar(stat="identity", fill="blue")
g <- g + ggtitle("Total Students by School")
g <- g + xlab("School") + ylab("Number of Students")
g
# Number of sections by school
# plot the number of sections by each school
schoolList <- c("A", "B","C", "D", "E")
sections <- c(length(which(MyStoryData$School=='A')), length(which(MyStoryData$School=='B')),
length(which(MyStoryData$School=='C')), length(which(MyStoryData$School=='D')),
length(which(MyStoryData$School =='E')))
sectbySchool <- data.frame(schoolList, sections)
colnames(sectbySchool)<- c("School", "Sections")
# histogram of sections by school
g <- ggplot(sectbySchool, aes(x=School, y=Sections))
g <- g + geom_bar(stat="identity", fill="purple")
g <- g + ggtitle("Total Sections by School")
g <- g + xlab("School") + ylab("Number of Sections")
g
# mean by Lesson Status to get a better handle on how many in each level
# histogram of sections by school
g <- ggplot(schoolLessonStatmeans, aes(x=Status, y=lStatusValue))
g <- g + geom_bar(stat="identity", fill="goldenrod")
g <- g + ggtitle("Mean Number of Students in Each Lesson Status Category")
g <- g + xlab("Lesson Status Category") + ylab("Mean Number of Students")
g
# Look at all the data via a scatter plot
g <- ggplot(meltMyStoryData, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Section, shape=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students") + ylim(0,60)
g
# plot by school and Status only
g <- ggplot(meltedData[1:30,], aes(x=School, y=Students))
g <- g + geom_point(aes(color=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students")
g
# obtain graphs of School B and School E only
justSchoolB <- meltMyStoryData[which(meltMyStoryData$School == "B")]
View(meltMyStoryData)
View(meltMyStoryData)
# obtain graphs of School B and School E only
justSchoolB <- meltMyStoryData[which(meltMyStoryData$School == "B"),]
View(justSchoolB)
View(justSchoolB)
# obtain graphs of School B and School E only
justSchoolBnE <- meltMyStoryData[which(meltMyStoryData$School == "B" | meltMyStoryData$School == "E"),]
View(justSchoolBnE)
View(justSchoolBnE)
g <- ggplot(justSchoolBnE, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Section, shape=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students") + ylim(0,60)
g
g<- ggplot(justSchoolBnE, aes(fill=School, y=Students, x=Status))
g<- g + geom_bar(position="dodge", stat="identity")
g <- g+ ggtitle("Students by Lesson Status and School without Totals") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("Lesson Status") + ylab("Number of Students")
g
g<- ggplot(justSchoolBnE, aes(fill=School, y=NumStudents, x=Status))
g<- g + geom_bar(position="dodge", stat="identity")
g <- g+ ggtitle("Students by Lesson Status and School without Totals") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("Lesson Status") + ylab("Number of Students")
g
View(SumBySchoolDF)
View(SumBySchoolDF)
# obtain graphs of School B and School E only
justSchoolBnE <- SumBySchoolDF[which(SumBySchoolDF$School == "B" | SumBySchoolDF$School == "E"),]
g <- ggplot(meltedData, aes(x=Status, y = Students, fill = School))
g <- g + geom_bar(stat = "identity")
g <- g+ ggtitle("Students by Lesson Status and School") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("Lesson Status") + ylab("Number of Students")
g
# barcharts by Lesson Status and School
g<- ggplot(meltedData, aes(fill=School, y=Students, x=Status))
g<- g + geom_bar(position="dodge", stat="identity")
g <- g+ ggtitle("Students by Lesson Status and School") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("Lesson Status") + ylab("Number of Students")
g
# barcharts by Lesson Status and School without Totals
g<- ggplot(meltedData[1:30,], aes(fill=School, y=Students, x=Status))
g<- g + geom_bar(position="dodge", stat="identity")
g <- g+ ggtitle("Students by Lesson Status and School without Totals") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("Lesson Status") + ylab("Number of Students")
g
# Look at all the data via a scatter plot
g <- ggplot(meltMyStoryData, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Section, shape=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students") + ylim(0,60)
g
# obtain graphs of School B and School E only
justSchoolBnE <- melt(SumBySchoolDF[which(SumBySchoolDF$School == "B" | SumBySchoolDF$School == "E"),])
colnames(justSchoolBnE) <- c("School", "Status", "NumStudents")
g <- ggplot(justSchoolBnE, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students") + ylim(0,60)
g
g <- ggplot(justSchoolBnE, aes(x=School, y=NumStudents))
g <- g + geom_point(aes(color=Status))
g <- g + ggtitle("Number of Students by School, Status and Section")
g <- g + theme(plot.title=element_text(hjust=0.5))
g <- g + xlab("School Name") + ylab("Number of Students")
g
# barcharts by School and Lesson Status
g<- ggplot(justSchoolBnE, aes(fill=Status, y=NumStudents, x=School))
g<- g + geom_bar(position="dodge", stat="identity")
g <- g+ ggtitle("Students by School and Lesson Status") + theme(plot.title= element_text(hjust=0.5))
g <- g + xlab("School") + ylab("Number of Students")
g
